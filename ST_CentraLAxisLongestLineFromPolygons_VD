DROP FUNCTION IF EXISTS ST_CentraLAxisLongestLineFromPolygons_VD(
    geom GEOMETRY,
    n integer)

CREATE OR REPLACE FUNCTION ST_CentraLAxisLongestLineFromPolygons_VD(
    geom GEOMETRY,
    n integer)
RETURNS TABLE (geom GEOMETRY) AS
$BODY$
    WITH
        tbla AS (SELECT (ST_Dump($1)).geom),
        tblb AS (SELECT ST_Buffer(ST_Boundary(ST_OrientedEnvelope(geom)),0.00001) geom FROM tbla),
        tblc AS (SELECT (ST_Dump(ST_Difference(ST_Boundary(a.geom), b.geom))).geom geom FROM tbla a JOIN tblb b ON true),
        tbld AS (SELECT (ST_Dump(ST_Difference(ST_Buffer(ST_OrientedEnvelope(a.geom), -0.00001), b.geom))).geom geom FROM tbla a JOIN tbla b ON true),
        tble AS (SELECT ST_Buffer(geom, 0.00001) geom  FROM (SELECT ST_MakeLine((ST_PointN(ST_Boundary(ST_OrientedEnvelope(geom)),1)), (ST_PointN(ST_Boundary(ST_OrientedEnvelope(geom)),4))) AS geom FROM tbla) AS foo),
        tblf AS (SELECT generate_series (0, n) as steps),
        tblg AS (SELECT steps AS stp, ST_LineInterpolatePoint(geom, steps/(SELECT count(steps)::float-1 FROM tblf)) geom FROM tblc, tblf GROUP BY tblf.steps, geom),
        tblh AS (SELECT ((ST_Dump(ST_VoronoiPolygons(ST_Collect(geom)))).geom) geom FROM tblg),
        tbli AS (SELECT (a.geom) geom FROM tbld a JOIN tble b ON ST_Intersects(a.geom,  ST_Buffer(b.geom, 0.00001))),
        tblj AS (SELECT ST_ExteriorRing(ST_Union(a.geom)) geom FROM tblh a JOIN tbli b ON ST_Intersects(a.geom, b.geom))
        SELECT ST_Intersection(a.geom, b.geom) geom FROM tblj a JOIN tbla b ON ST_Intersects(a.geom, b.geom);
$BODY$
LANGUAGE SQL

SELECT ST_CentraLAxisLongestLineFromPolygons_VD(geom, 100) geom FROM <source_table>
